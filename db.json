[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2022-06-24T19:50:35.419Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Some title", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2022-06-24T20:02:44.689Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "another title", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2022-06-24T21:10:48.031Z", "user": 1, "content_type": 4, "object_id": "2", "object_repr": "user1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2022-06-24T21:10:51.788Z", "user": 1, "content_type": 4, "object_id": "2", "object_repr": "user1", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2022-06-24T22:48:29.108Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "123", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2022-06-24T22:51:22.810Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "ha-ha", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2022-06-24T22:51:22.818Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "ha-ha", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2022-06-24T22:51:22.821Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "123", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2022-06-24T22:51:22.825Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "another title", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2022-06-24T22:51:22.828Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Some title", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2022-06-24T22:56:21.980Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Туристический метод кластерного анализа: предпосылки и развитие", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2022-06-24T22:56:32.853Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "asdfasdf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2022-06-24T22:57:09.674Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "Определенный страховой полис: методология и особенности", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2022-06-24T22:57:36.394Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "Бытовой подряд как пародия", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2022-06-25T11:35:54.826Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "vsgdf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2022-06-25T11:35:54.840Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "adasfasdf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2022-06-25T11:35:54.844Z", "user": 1, "content_type": 7, "object_id": "19", "object_repr": "123123", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2022-06-25T11:35:54.849Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "asdfasdfg", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2022-06-25T11:35:54.853Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "asdasd", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2022-06-25T11:35:54.856Z", "user": 1, "content_type": 7, "object_id": "16", "object_repr": "asdfasdf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2022-06-25T11:35:54.860Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "esckg", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2022-06-25T11:35:54.865Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "check content", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2022-06-25T11:35:54.874Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "Some test", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2022-06-25T11:35:54.878Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "Бытовой подряд как пародия", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2022-06-25T11:35:54.886Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "Определенный страховой полис: методология и особенности", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2022-06-25T11:35:54.891Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Туристический метод кластерного анализа: предпосылки и развитие", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2022-06-25T11:36:20.284Z", "user": 1, "content_type": 7, "object_id": "22", "object_repr": "lorem ipsum", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2022-06-25T11:36:33.431Z", "user": 1, "content_type": 7, "object_id": "23", "object_repr": "lorem-ipsum1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2022-06-25T11:36:49.768Z", "user": 1, "content_type": 7, "object_id": "24", "object_repr": "lorem ipsum 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2022-06-25T11:37:04.497Z", "user": 1, "content_type": 7, "object_id": "25", "object_repr": "lorem ipsum 3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2022-06-25T11:37:21.196Z", "user": 1, "content_type": 7, "object_id": "26", "object_repr": "lorem ipsum 4", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2022-06-26T09:12:15.157Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Мама заставила сына извиниться перед одноклассницей, которую он оскорблял", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2022-06-26T09:20:15.970Z", "user": 1, "content_type": 7, "object_id": "32", "object_repr": "Влюбившись в тряпичную куклу, женщина вышла за неё замуж и «родила» игрушечного ребёнка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\", \"\\u0422\\u0435\\u043b\\u043e \\u043d\\u043e\\u0432\\u043e\\u0441\\u0442\\u0438\"]}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2022-06-26T09:21:01.340Z", "user": 1, "content_type": 7, "object_id": "33", "object_repr": "Пятилетняя девочка опубликовала собственную книгу и стала мировой рекордсменкой", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\", \"\\u0422\\u0435\\u043b\\u043e \\u043d\\u043e\\u0432\\u043e\\u0441\\u0442\\u0438\"]}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2022-06-26T09:22:18.111Z", "user": 1, "content_type": 7, "object_id": "34", "object_repr": "Последователи новой моды отказываются от посуды и едят прямо со стола", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\", \"\\u041a\\u0430\\u0440\\u0442\\u0438\\u043d\\u043a\\u0430\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2022-06-27T09:56:25.535Z", "user": 1, "content_type": 7, "object_id": "37", "object_repr": "Из машины, которую оставили открытой, пропала лишь сосиска в тесте", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2022-06-27T09:56:36.908Z", "user": 1, "content_type": 7, "object_id": "36", "object_repr": "Свадьба отменилась из-за жениха, отправившегося грабить магазин", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2022-06-27T09:56:42.032Z", "user": 1, "content_type": 7, "object_id": "35", "object_repr": "Учительницу уволили за скандальную фотосессию учеников в классе", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2022-06-27T09:56:47.755Z", "user": 1, "content_type": 7, "object_id": "34", "object_repr": "Последователи новой моды отказываются от посуды и едят прямо со стола", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2022-06-27T09:57:02.614Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "Бедный рыбак разбогател, поймав одну-единственную рыбу", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2022-06-27T09:57:07.529Z", "user": 1, "content_type": 7, "object_id": "30", "object_repr": "Необычный переносной туалет поместится и в сумочке, и даже в кармане", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2022-06-27T09:57:15.545Z", "user": 1, "content_type": 7, "object_id": "32", "object_repr": "Влюбившись в тряпичную куклу, женщина вышла за неё замуж и «родила» игрушечного ребёнка", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2022-06-27T09:57:32.866Z", "user": 1, "content_type": 7, "object_id": "29", "object_repr": "Испугавшись молнии, мужчина в первый момент даже не понял, от чего именно спрятался", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2022-06-27T09:57:45.644Z", "user": 1, "content_type": 7, "object_id": "31", "object_repr": "Водитель не только превысил скорость, но и перевозил аллигатора на пассажирском сиденье", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2022-06-27T10:20:16.434Z", "user": 1, "content_type": 7, "object_id": "39", "object_repr": "some news", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2022-06-27T10:20:16.441Z", "user": 1, "content_type": 7, "object_id": "38", "object_repr": "some news", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2022-06-27T10:20:45.559Z", "user": 1, "content_type": 7, "object_id": "40", "object_repr": "123123", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2022-06-27T10:22:08.978Z", "user": 1, "content_type": 7, "object_id": "42", "object_repr": "asd", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2022-06-27T10:22:08.984Z", "user": 1, "content_type": 7, "object_id": "41", "object_repr": "somsadfasdlkjfasd and asdfasd asd asd asd", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2022-06-27T10:53:37.164Z", "user": 1, "content_type": 7, "object_id": "37", "object_repr": "Из машины, которую оставили открытой, пропала лишь сосиска в тесте", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u043b\\u043e \\u043d\\u043e\\u0432\\u043e\\u0441\\u0442\\u0438\"]}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2022-06-27T10:54:16.580Z", "user": 1, "content_type": 7, "object_id": "37", "object_repr": "Из машины, которую оставили открытой, пропала лишь сосиска в тесте", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u043b\\u043e \\u043d\\u043e\\u0432\\u043e\\u0441\\u0442\\u0438\"]}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2022-06-27T10:58:35.905Z", "user": 1, "content_type": 7, "object_id": "43", "object_repr": "Россиянка годами использовала гранату в качестве подставки для ножниц", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2022-06-27T12:53:01.209Z", "user": 1, "content_type": 7, "object_id": "46", "object_repr": "asdfasdfasjk fasdkjl fa sdl; fkas", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2022-06-27T12:53:01.224Z", "user": 1, "content_type": 7, "object_id": "45", "object_repr": "asdfasdf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2022-06-27T12:53:01.227Z", "user": 1, "content_type": 7, "object_id": "44", "object_repr": "asdf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2022-06-27T12:53:01.229Z", "user": 1, "content_type": 7, "object_id": "43", "object_repr": "Россиянка годами использовала гранату в качестве подставки для ножниц", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2022-06-27T14:01:08.470Z", "user": 1, "content_type": 7, "object_id": "50", "object_repr": "123123", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2022-06-27T14:04:59.168Z", "user": 1, "content_type": 7, "object_id": "52", "object_repr": "How to serve static and media files in NGINX for your Django Project", "action_flag": 3, "change_message": ""}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view user", "content_type": 4, "codename": "view_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view content type", "content_type": 5, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view session", "content_type": 6, "codename": "view_session"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add news", "content_type": 7, "codename": "add_news"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change news", "content_type": 7, "codename": "change_news"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete news", "content_type": 7, "codename": "delete_news"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view news", "content_type": 7, "codename": "view_news"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$320000$UDxEDoxhixtQnSsk89cXA4$PZY5JJE8tA34WT0G4yElkPSF5jCD2OqRX7hxTNQa308=", "last_login": "2022-06-27T13:55:34.435Z", "is_superuser": true, "username": "root", "first_name": "", "last_name": "", "email": "admin@admin.com", "is_staff": true, "is_active": true, "date_joined": "2022-06-24T18:10:58.352Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$320000$4Ltfn6EpFW5bjL5FeGegut$kAVMO3YCv0Y/t0HKLjaYs/zfZ42VNLVcTMeVdx+geoE=", "last_login": null, "is_superuser": false, "username": "user1", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-24T21:10:47Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 3, "fields": {"password": "pbkdf2_sha256$320000$P2MCax7txW93mqUMJFp0UQ$obqfk/cX4xTbGCSfNXfAVzX0kGdU1DZHedjITQAs84s=", "last_login": "2022-06-24T21:14:36.243Z", "is_superuser": false, "username": "user2", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-24T21:14:35.678Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 4, "fields": {"password": "pbkdf2_sha256$320000$WRnCZEes7YneBouqqjE9Cr$yl3C4WoUeqGvTX+xI1KNfjgqSf9ZZax9LvUanzbNo7I=", "last_login": "2022-06-24T21:19:47.594Z", "is_superuser": false, "username": "joe_rude", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-24T21:19:47.015Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 5, "fields": {"password": "pbkdf2_sha256$320000$SDelrKmOCHMuhVBxCbAlpI$FdHVOVdItGSCgntO+xXdIKz9MvEMVH7SlBr4fvpzjEs=", "last_login": "2022-06-24T21:27:52.953Z", "is_superuser": false, "username": "mba321", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-24T21:27:41.559Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 6, "fields": {"password": "pbkdf2_sha256$320000$kbnigYIHlZsA3Znl7zVVxZ$Ouu6T+Z6B6HK8pYNgkYZsS3rsNsebOwWlsKkkMv3Uj4=", "last_login": "2022-06-24T21:53:42.743Z", "is_superuser": false, "username": "jomajoma", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-24T21:53:42.375Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 7, "fields": {"password": "pbkdf2_sha256$320000$UXO8mcn4SwqEvsOoqLdX7H$7AmjeNFVntcCrcNAUkg7n0FBM3IhAqDVv0/JcVRCk38=", "last_login": "2022-06-24T21:54:23.653Z", "is_superuser": false, "username": "petrovpavel", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-24T21:54:23.227Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 8, "fields": {"password": "pbkdf2_sha256$320000$gi3fStZLYW0Ji93drXcs9O$W4EbhIa6aWC3HgN4gV5g/DQUDC1TGzEU15usddfyDfk=", "last_login": "2022-06-24T22:05:26.786Z", "is_superuser": false, "username": "shamil123", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-24T22:05:26.485Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 9, "fields": {"password": "pbkdf2_sha256$320000$kQhJUzb2FHvWHcwcHFvL6w$5bevWc00UvNzBlTLClISGIMoazes0nfzf7ukVArs2eY=", "last_login": "2022-06-26T15:50:04.602Z", "is_superuser": false, "username": "asdasd", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-26T15:50:04.305Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 10, "fields": {"password": "pbkdf2_sha256$320000$iTI8JF7i4pCC0MIaqnKz4m$srmyCMA+5zAKnnWtn3bWbrMc/RpohT2/fw+S1oimGjo=", "last_login": "2022-06-27T07:47:15.328Z", "is_superuser": false, "username": "user3", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2022-06-27T07:47:15.011Z", "groups": [], "user_permissions": []}}, {"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "newsfeed", "model": "news"}}, {"model": "sessions.session", "pk": "bws0cfx5hote5ou7iby1aafkz0lix7cb", "fields": {"session_data": "e30:1o4r0s:lmonwq5zV0bc8hUPingd3svDBeGRjDB4ORWY-7i32FM", "expire_date": "2022-07-08T21:38:50.203Z"}}, {"model": "sessions.session", "pk": "fz6mg688iyllhlexhk2wnme56ah1zlms", "fields": {"session_data": ".eJxVjDsOwjAQBe_iGln2Ov5R0nMGazdr4wBypDipEHeHSCmgfTPzXiLhtta09bykicVZaHH63QjHR2474Du22yzHua3LRHJX5EG7vM6cn5fD_Tuo2Ou3Voa9wcgZgmPSYCg6DGzJZM9ACEPRYFX22utYgtKhAJCzKpigvB_E-wPYnDbf:1o5pDC:TiRQtPY2gAlu09SK-Q0MsTqdRgmKbs2gjRClTddzha4", "expire_date": "2022-07-11T13:55:34.441Z"}}, {"model": "sessions.session", "pk": "kic197hc869hqiccpjwqh4n56f73jfw0", "fields": {"session_data": ".eJxVjDsOwjAQBe_iGln2Ov5R0nMGazdr4wBypDipEHeHSCmgfTPzXiLhtta09bykicVZaHH63QjHR2474Du22yzHua3LRHJX5EG7vM6cn5fD_Tuo2Ou3Voa9wcgZgmPSYCg6DGzJZM9ACEPRYFX22utYgtKhAJCzKpigvB_E-wPYnDbf:1o4rvI:UbxeDL9KinoErv2AIYtAJeN6yydlM4x1za7sX3soWuQ", "expire_date": "2022-07-08T22:37:08.498Z"}}, {"model": "sessions.session", "pk": "lnbd8w45qjxdsfck74dof3c9cmb4vpmu", "fields": {"session_data": "e30:1o4rFG:eRk6foLhtE96qraYaqFLKFj-w1_YinyxZ8rwCecLyR0", "expire_date": "2022-07-08T21:53:42.740Z"}}, {"model": "sessions.session", "pk": "nofv05b268tgne7tvta78hryd3e3dpb8", "fields": {"session_data": ".eJxVjDsOwjAQBe_iGln2Ov5R0nMGazdr4wBypDipEHeHSCmgfTPzXiLhtta09bykicVZaHH63QjHR2474Du22yzHua3LRHJX5EG7vM6cn5fD_Tuo2Ou3Voa9wcgZgmPSYCg6DGzJZM9ACEPRYFX22utYgtKhAJCzKpigvB_E-wPYnDbf:1o5UTx:zbUxTH9m-QQoUdZWIwMCHEAOlgu9BeWBS8pnCo9qigc", "expire_date": "2022-07-10T15:47:29.788Z"}}, {"model": "newsfeed.news", "pk": 22, "fields": {"title": "lorem ipsum", "slug": "lorem-ipsum", "content": "<p><strong>Lorem Ipsum</strong>&nbsp;is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>", "created_at": "2022-06-25T11:36:20.279Z", "author": 4}}, {"model": "newsfeed.news", "pk": 23, "fields": {"title": "lorem-ipsum1", "slug": "lorem-ipsum1", "content": "<p><strong>Lorem Ipsum</strong>&nbsp;is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>", "created_at": "2022-06-25T11:36:33.430Z", "author": 5}}, {"model": "newsfeed.news", "pk": 24, "fields": {"title": "lorem ipsum 2", "slug": "lorem-ipsum-2", "content": "<p><strong>Lorem Ipsum</strong>&nbsp;is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>", "created_at": "2022-06-25T11:36:49.765Z", "author": 2}}, {"model": "newsfeed.news", "pk": 25, "fields": {"title": "lorem ipsum 3", "slug": "lorem-ipsum-3", "content": "<p><strong>Lorem Ipsum</strong>&nbsp;is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>", "created_at": "2022-06-25T11:37:04.493Z", "author": 6}}, {"model": "newsfeed.news", "pk": 26, "fields": {"title": "lorem ipsum 4", "slug": "lorem-ipsum-4", "content": "<p><strong>Lorem Ipsum</strong>&nbsp;is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>", "created_at": "2022-06-25T11:37:21.194Z", "author": 8}}, {"model": "newsfeed.news", "pk": 28, "fields": {"title": "Бедный рыбак разбогател, поймав одну-единственную рыбу", "slug": "bednyj-rybak-razbogatel-pojmav-odnu-edinstvennuyu", "content": "<p>Житель Пакистана, ловивший рыбу в Оманском заливе у берегов города Дживани, даже не подозревал, что скоро разбогатеет.</p>\r\n\r\n<p>Приятные предчувствия зародились в сердце бедного рыбака в тот момент, когда он увидел, что в его сеть попалась крупная рыбина. Это оказалась рыба, которую местные жители называют &laquo;сува&raquo;. Она встречается крайне редко, а потому и стоит дорого. Чудо-улов рыбака весил 48,5 килограммов.</p>\r\n\r\n<p>Выставив суву на аукцион, мужчина получил за неё сумму, которая поможет ему выбраться из бедности &mdash; больше 130000 долларов. Естественно, рыболов пребывает в восторге по столь радостному поводу.</p>", "created_at": "2022-06-27T09:57:02.605Z", "author": 1}}, {"model": "newsfeed.news", "pk": 29, "fields": {"title": "Испугавшись молнии, мужчина в первый момент даже не понял, от чего именно спрятался", "slug": "ispugavshis-molnii-muzhchina-v-pervyj-moment-dazhe", "content": "<p>Узнав из прогноза погоды о приближающемся дожде, мужчина по имени Марк решил выйти на улицу и повозиться со своим грузовиком, пока это было возможно.</p>\r\n\r\n<p>Но мирная сценка прервалась довольно драматическим образом. Яркая молния осветила небо, раздался гром, и автовладелец спрятался за своё транспортное средство, в первый момент даже не поняв, от чего конкретно ему нужно укрытие. Но испуг быстро сменился восторгом, ведь Марк понял, что взволновавшее его природное явление было запечатлено камерой видеонаблюдения.</p>\r\n\r\n<p>Теперь мужчина, являющийся большим любителем природы, не только сохранил получившиеся кадры в своём архиве, но и поделился мечтой &mdash; ему бы очень хотелось, чтобы камера как-нибудь подловила метеор.</p>", "created_at": "2022-06-27T09:57:32.860Z", "author": 1}}, {"model": "newsfeed.news", "pk": 30, "fields": {"title": "Необычный переносной туалет поместится и в сумочке, и даже в кармане", "slug": "neobychnyj-perenosnoj-tualet-pomestitsya-i-v-sumoc", "content": "<p>Когда нам требуется воспользоваться туалетом, но по каким-либо причинам это невозможно сделать, чувства возникают самые тягостные.</p>\r\n\r\n<p>Этой проблемой озаботился 30-летний житель Японии по имени Есинори Кокенава, основатель компании &laquo;Kokenawa Inc.&raquo;. Ещё в 2019 году он придумал удивительное изобретение &laquo;Pocketoilet&raquo;. Это не просто переносной туалет &mdash; это по сути крохотная вещица размером 7 сантиметров на 6,5 сантиметров. Компактность изобретения позволяет носить его хоть в сумочке, хоть в кармане. &laquo;Pocketoilet&raquo; состоит из мешка, сделанного из специальных прочных волокон. Этот мешок можно поместить, например, в обычное ведро, а дальше туда засыпается вторая, не менее важная часть изобретения &mdash; пакетик с реактивами-коягулянтами. Именно эти реактивы делают так, что от содержимого пакета практически не будет запаха, причём в течении недели. Бизнесмен уверен, что его творение незаменимо в местностях, где по какой-либо причине туалеты (причём даже обычные кабинки) недоступны.</p>\r\n\r\n<p>Кокенава добавил, что на данный момент его компания продала около 50000 карманных туалетов, так что изобретение и впрямь можно назвать и полезным, и востребованным.</p>", "created_at": "2022-06-27T09:57:07.526Z", "author": 1}}, {"model": "newsfeed.news", "pk": 31, "fields": {"title": "Водитель не только превысил скорость, но и перевозил аллигатора на пассажирском сиденье", "slug": "voditel-ne-tolko-prevysil-skorost-no-i-perevozil-a", "content": "<p>Автомобилист из Уэббера (Мичиган, США), превысивший скорость, отказался останавливаться по требованию полицейских.</p>\r\n\r\n<p>Началась погоня, в результате которой машина нарушителя застряла между двумя деревьями, и 40-летнего мужчину взяли под стражу, предъявив ему несколько обвинений. Однако, полицейских поджидал сюрприз.</p>\r\n\r\n<p>На пассажирском сиденье машины обнаружился аллигатор (как выяснилось, по кличке Карен), который попытался скрыться с места происшествия, но тоже был задержан после того, что офицеры назвали &laquo;непродолжительной потасовкой&raquo;. Полицейские добавили, что не будут предъявлять Карен обвинения. Они не верят, что аллигатор мог принимать участие в управлении транспортным средством, и считают, что создание это стало невольным соучастником инцидента.</p>", "created_at": "2022-06-27T09:57:45.642Z", "author": 1}}, {"model": "newsfeed.news", "pk": 32, "fields": {"title": "Влюбившись в тряпичную куклу, женщина вышла за неё замуж и «родила» игрушечного ребёнка", "slug": "vlyubivshis-v-tryapichnuyu-kuklu-zhenshina-vyshla", "content": "<p>Как-то раз жительница Бразилии по имени Майривоне Роша Моралес пожаловалась маме на то, что она очень одинока.</p>\r\n\r\n<p>Дама регулярно ходит на народные танцы форро, но там у неё не всегда имеется партнёр &mdash; из-за этого 37-летней женщине очень грустно. Мама предложила дочери утешение, сшив для неё тряпичную куклу, которую назвали Марсело.</p>\r\n\r\n<p>А дальше случилось то, что Майривоне считает чудом &mdash; она влюбилась в Марсело с первого взгляда. Более того &mdash; у пары завязался настолько бурный роман, что женщина через несколько месяцев поняла, что &laquo;беременна&raquo;. Пришло время развивать отношения, и Майривоне, не желая &laquo;рожать&raquo; ребёночка вне брака, вышла за любимую куклу замуж. Так что теперь у Майривоне есть и обожаемый муж, и маленький Марселиньо. &laquo;Роды&raquo; длились всего 35 минут в присутствии врача и медсестры, а сам процесс транслировался из дома роженицы для онлайн-аудитории, состоявшей из 200 человек.</p>\r\n\r\n<p>Счастливая жена и мать необычного семейства рассказала, что очень довольна жизнью, вот только у Марсело есть существенный недостаток &mdash; он ленив и категорически не желает работать. Так что трудиться и оплачивать все счета приходится супруге.</p>\r\n\r\n<p>Есть и ещё один аспект, который расстраивает и даже сильно злит Майривоне. Её бесит, когда люди говорят о том, что её великолепная семья &mdash; по сути ненастоящая. Для героини этой истории всё очень серьёзно.</p>", "created_at": "2022-06-27T09:57:15.539Z", "author": 1}}, {"model": "newsfeed.news", "pk": 33, "fields": {"title": "Пятилетняя девочка опубликовала собственную книгу и стала мировой рекордсменкой", "slug": "pyatiletnyaya-devochka-opublikovala-sobstvennuyu-k", "content": "<p>Несмотря на то, что Белле Джей Дарк всего пять лет, она уже является и писательницей, и мировой рекордсменкой.</p>\r\n\r\n<p>Маленькая жительница Великобритании написала и проиллюстрировала книгу &laquo;Потерявшаяся кошка&raquo; (&laquo;The Lost Cat&raquo;), которую выпустило в свет издательство &laquo;Ginger Fyre Press&raquo;.</p>\r\n\r\n<p>Книга разошлась тиражом более 1000 экземпляров, что являлось обязательным условием для того, чтобы мировой рекорд был засчитан. Так что представители Книги рекордов Гиннеса официально заявили, что Белла в возрасте 5 лет и 211 дней стала самой молодой публикуемой писательницей (в номинации среди девочек).</p>\r\n\r\n<p>Челси Сайм, мама Беллы, рассказала, что вся семья невероятно гордится юным дарованием. Книга &laquo;The Lost Cat&raquo;, как нетрудно догадаться, повествует о кошке, которая потерялась и пришла к выводу, что не стоит выходить на улицу без мамы. Так что данное литературное произведение довольно поучительно. Челси также намекнула, что у её дочери ещё немало идей, так что есть надежда дождаться продолжения &laquo;Потерявшейся кошки&raquo;.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-06-26T09:21:01.335Z", "author": 1}}, {"model": "newsfeed.news", "pk": 34, "fields": {"title": "Последователи новой моды отказываются от посуды и едят прямо со стола", "slug": "posledovateli-novoj-mody-otkazyvayutsya-ot-posudy", "content": "<p>Если вы не любите мыть посуду, то новая тенденция, распространяющаяся в соцсетях, вполне может прийтись вам по вкусу.</p>\r\n\r\n<p>Мода называется &laquo;грязный ужин&raquo; (&laquo;messy dinner&raquo;) &mdash; и, собственно, этим всё сказано. Приготовив еду, достаточно просто высыпать её на стол, застеленный плёнкой. Дальше всё семейство насыщается прямо со стола. Как нетрудно догадаться, посуду после такой странной трапезы мыть не нужно.</p>\r\n\r\n<p>&laquo;Грязный ужин&raquo; вызывает у людей неоднозначную реакцию. Многих беспокоит плёнка, которая может быть токсичной и навредить здоровью. Другим людям не по душе отсутствие культуры и воспитания при таком приёме пищи &mdash; всё превращается в свинство. Но есть персоны, которые в восторге от идеи, считая её весёлой и способной отлично сплотить всю семью. Похоже, что &laquo;грязный ужин&raquo; вполне может стать семейным развлечением, проводимым время от времени, но переводить его на постоянную основу не стоит.</p>", "created_at": "2022-06-27T09:56:47.751Z", "author": 1}}, {"model": "newsfeed.news", "pk": 35, "fields": {"title": "Учительницу уволили за скандальную фотосессию учеников в классе", "slug": "uchitelnicu-uvolili-za-skandalnuyu-fotosessiyu-uch", "content": "<p>Несмотря на то, что Эмма Райт много лет преподаёт искусство, недавно случился скандал, после которого 41-летнюю женщину уволили из школы искусства и дизайна.</p>\r\n\r\n<p>Неприятность с преподавательницей из Нортгемптоншира (Англия) случилась после того, как директору учебного заведения попалось на глаза портфолио одного из учеников-подростков. Фотосессия, проведённая в классе с позволения Эммы, включала в себя снимки с частичным обнажением 15-летних учащихся (на снимках юные модели, раздетые до пояса, прикрывали грудь руками). Кроме того, в портфолио обнаружились фотографии подростков в нижнем белье, а также показывающих оскорбительные жесты, курящих и держащих в руках алкогольные напитки.</p>\r\n\r\n<p>Эмма объяснила, что рассказывала ученикам о некоем современном художнике, который создаёт скандальные произведения искусства, наводящие на размышления. Однако, она якобы объяснила подросткам, что они не обязаны создавать нечто подобное. Но впечатлительные школьники всё-таки прониклись неподобающими идеями и устроили в классе фотосессию. Позже преподавательница признала, что ей стоило вовремя осознать неуместность такого урока. Впрочем, сожалеть поздно, ведь женщину не только уволили, но и запретили впредь заниматься преподавательской деятельностью.</p>", "created_at": "2022-06-27T09:56:42.030Z", "author": 1}}, {"model": "newsfeed.news", "pk": 36, "fields": {"title": "Свадьба отменилась из-за жениха, отправившегося грабить магазин", "slug": "svadba-otmenilas-iz-za-zheniha-otpravivshegosya-gr", "content": "<p>Владелец магазина &laquo;Premier&raquo; (Сандерленд, Англия) и работающий там продавец вовсе не пришли в замешательство, когда увидели вооружённого грабителя.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Преступник рассчитывал получить деньги из кассы, но вместо этого получил отпор. Защищавшиеся мужчины скрутили злоумышленника и после передали его в руки полиции. Задержанным оказался 25-летний студент бакалавриата по имени Луис Кросби.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Оказывается, незадолго до инцидента мужчина потерял все свои деньги, неосторожно вложившись в криптовалюту. Скопленные средства предназначались на оплату арендованного жилья, а также на свадьбу. Похоже, что невесте, гражданке Сингапура, придётся уже во второй раз отменять бракосочетание (первая отмена случилась из-за пандемии).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Впрочем, судья Джули Клемитсон учла тот факт, что подсудимый ранее не нарушал закон. Кроме того, до прискорбного инцидента Луис мог похвастаться идеальной репутацией и активно занимался благотворительностью. Лишившись сбережений, он испытал настолько сильное потрясение, что совершил импульсивный поступок. Кстати, и пистолет-то у грабителя был пневматическим. Таким образом, студенту и несостоявшемуся молодожёну назначили наказание в виде двух лет тюремного срока с отсрочкой на два года. Также Луису нужно будет пройти курс психологической реабилитации и в течение года соблюдать комендантский час.</p>", "created_at": "2022-06-27T09:56:36.902Z", "author": 1}}, {"model": "newsfeed.news", "pk": 37, "fields": {"title": "Из машины, которую оставили открытой, пропала лишь сосиска в тесте", "slug": "iz-mashiny-kotoruyu-ostavili-otkrytoj-propala-lish", "content": "<p>Дин Моррис, который приехал в Лланелли (Уэльс), чтобы навестить семью, стал жертвой курьёзного преступления.&nbsp;&nbsp;</p>\r\n\r\n<p>Мужчина припарковался возле дома своей бабушки и по забывчивости оставил машину открытой. Когда владелец вернулся к автомобилю, то быстро понял, что некая предприимчивая личность успела пошариться по салону. Но, как ни странно, вор не польстился ни на одну из ценных вещей, а похитил лишь сосиску в тесте из пекарни &laquo;Greggs&raquo;.</p>\r\n\r\n<p>Несмотря на то, что Дин остался всего лишь без выпечки, он всё равно немного расстроен. Мужчина предвкушал, как с удовольствием съест сосиску, а дерзкий преступник лишил его такой радости. Однако, в полицию жертва кражи не пошла. Дин справедливо рассудил, что его самого могут арестовать за то, что он отвлекает борцов с преступностью такими пустяками.</p>", "created_at": "2022-06-27T10:54:16.571Z", "author": 1}}, {"model": "newsfeed.news", "pk": 51, "fields": {"title": "Почему не показываются картинки Django?", "slug": "django", "content": "<p>&nbsp;</p>\r\n\r\n<p>Не отображаются картинки на моем проекте, url вроде верный, картинка верно выкачивается в media.<br />\r\nBlog - приложение.<br />\r\ndjangoBlog - главное приложение.<br />\r\nMEDIA_ROOT:</p>\r\n\r\n<pre>\r\n<code>MEDIA_URL = &#39;/media/&#39;\r\nMEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)</code></pre>\r\n\r\n<p><br />\r\nСтруктура проекта:<br />\r\n<img alt=\"65766c4511.jpg\" src=\"http://dl3.joxi.net/drive/2018/04/27/0027/1412/1803652/52/65766c4511.jpg\" /><br />\r\nКод html в котором выводится картинка:</p>\r\n\r\n<pre>\r\n<code>{% extends &#39;base.html&#39; %}\r\n\r\n{% block content %}\r\n    &lt;div class=&quot;post&quot;&gt;\r\n        {% if post.published_date %}\r\n            &lt;div class=&quot;date&quot;&gt;\r\n                {{ post.published_date }}\r\n            &lt;/div&gt;\r\n        {% endif %}\r\n        {% if user.is_authenticated %}\r\n             &lt;a class=&quot;btn btn-default&quot; href=&quot;{% url &#39;post_edit&#39; pk=post.pk %}&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-pencil&quot;&gt;&lt;/span&gt;&lt;/a&gt;\r\n        {% endif %}\r\n        &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\r\n        &lt;img src=&quot;{{ post.post_image.url }}&quot; alt=&quot;Картинка поста&quot;/&gt;\r\n        &lt;p&gt;{{ post.text|linebreaksbr }}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n{% endblock %}</code></pre>\r\n\r\n<p><br />\r\nblogs/urls.py:</p>\r\n\r\n<pre>\r\n<code>from django.conf.urls import url\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    url(r&#39;^$&#39;, views.post_list, name=&#39;post_list&#39;),\r\n    url(r&#39;^post/(?P&lt;pk&gt;\\d+)/$&#39;, views.post_detail, name=&#39;post_detail&#39;),\r\n    url(r&#39;^post/new/$&#39;, views.post_new, name=&#39;post_new&#39;),\r\n    url(r&#39;^post/(?P&lt;pk&gt;\\d+)/edit/$&#39;, views.post_edit, name=&#39;post_edit&#39;),\r\n\r\n]</code></pre>\r\n\r\n<p><br />\r\nblogs/view.py:</p>\r\n\r\n<pre>\r\n<code>from django.shortcuts import render, get_object_or_404, redirect\r\nfrom django.utils import timezone\r\nfrom .models import Post\r\nfrom .forms import PostForm\r\n\r\n\r\ndef post_list(request):\r\n    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by(&#39;published_date&#39;)\r\n    return render(request, &#39;post_list.html&#39;, {&#39;posts&#39;: posts})\r\n\r\n\r\ndef post_detail(request, pk):\r\n    post = get_object_or_404(Post, pk=pk)\r\n    return render(request, &#39;post_detail.html&#39;, {&#39;post&#39;: post})\r\n\r\n\r\ndef post_new(request):\r\n    if request.method == &quot;POST&quot;:\r\n        form = PostForm(request.POST)\r\n        if form.is_valid():\r\n            post = form.save(commit=False)\r\n            post.author = request.user\r\n            post.published_date = timezone.now()\r\n            post.save()\r\n            return redirect(&#39;post_detail&#39;, pk=post.pk)\r\n    else:\r\n        form = PostForm()\r\n    return render(request, &#39;post_edit.html&#39;, {&#39;form&#39;: form})\r\n\r\n\r\ndef post_edit(request, pk):\r\n    post = get_object_or_404(Post, pk=pk)\r\n    if request.method == &quot;POST&quot;:\r\n        form = PostForm(request.POST, instance=post)\r\n        if form.is_valid():\r\n            post = form.save(commit=False)\r\n            post.author = request.user\r\n            post.published_date = timezone.now()\r\n            post.save()\r\n            return redirect(&#39;post_detail&#39;, pk=post.pk)\r\n    else:\r\n        form = PostForm(instance=post)\r\n    return render(request, &#39;post_edit.html&#39;, {&#39;form&#39;: form})</code></pre>\r\n\r\n<p><br />\r\nblogs/models.py:</p>\r\n\r\n<pre>\r\n<code>from django.db import models\r\nfrom django.utils import timezone\r\n\r\n\r\nclass Post(models.Model):\r\n    author = models.ForeignKey(&#39;auth.User&#39;, on_delete=models.CASCADE)\r\n    title = models.CharField(max_length=200)\r\n    text = models.TextField()\r\n    created_date = models.DateTimeField(\r\n            default=timezone.now)\r\n    published_date = models.DateTimeField(\r\n            blank=True, null=True)\r\n    post_image = models.ImageField(upload_to=&#39;post_images/&#39;, blank=True, null=True)\r\n\r\n    def publish(self):\r\n        self.published_date = timezone.now()\r\n        self.save()\r\n\r\n    def __str__(self):\r\n        return self.title</code></pre>", "created_at": "2022-06-27T14:00:55.030Z", "author": 1}}, {"model": "newsfeed.news", "pk": 53, "fields": {"title": "Установка и настройка Django 3 с Nginx, PostgreSQL, Gunicorn на Ubuntu 20", "slug": "django-3-nginx-postgresql-gunicorn-ubuntu-20", "content": "<p>В этой статье будет рассмотрена установка и настройка фреймворка Python Django 3, базы данных PostgreSQL, веб-сервера Nginx и WSGI сервера Gunicorn на Ubuntu 20. Подходы, которые используются в этой статье,&nbsp;подойдут для Django 2 и Ubuntu младших версий с небольшими отличиями. Различия между, версиями Django, тоже будут рассмотрены.</p>\r\n\r\n<p>Перед тем как что-либо устанавливать вы должны запустить программу, которая проверит обновления и обновит сведения о доступных пакетах:</p>\r\n\r\n<pre>\r\n<code>sudo apt update</code></pre>\r\n\r\n<p>Для того что бы Django 3 работал корректно ему нужен Python версии больше 3.6. Узнать версию Python, которая используется у вас по умолчанию можно так:</p>\r\n\r\n<pre>\r\n<code>python3 --version</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/8.jpg\" target=\"_blank\"><img alt=\"Проверка версии интерпретатора python на Ubuntu\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/8.jpg\" title=\"Проверка версии интерпретатора python на Ubuntu\" /></a></p>\r\n\r\n<p>Версия Python 3.8 по умолчанию идет вместе с Ubuntu 20.</p>\r\n\r\n<p>Что бы вы смогли выполнить все операции ниже вам понадобится пользователь с правами sudo.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Навигация по посту</p>\r\n\r\n<ul>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#ustanovka-paketov\">Установка пакетов</a></li>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#sozdanie-polzovatelya-i-bazu-dannuh\">Создание пользователей и базы данных PosgreSQL</a></li>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#sozdanie-virtualnogo-okrujeniya-i-rabota-s-pip\">Создание виртуального окружения и работа с pip</a></li>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#sozdanie-proekta-django-i-ego-nastroyka-s-settings-py\">Создание проекта Django и его настройка c settings.py</a></li>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#dopolnitelnue-nastroyki-django\">Дополнительные настройки Django</a></li>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#sozdanie-socketa-i-nastroyka-wsgi-gunicorn\">Создание сокета и настройка WSGI Gunicorn</a></li>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#proverka-rabotu-gunicorn\">Проверка работы gunicorn</a></li>\r\n\t<li><a href=\"https://fixmypc.ru/post/ustanovka-i-nastroika-django-3-s-nginx-postgresql-gunicorn-wsgi-na-ubuntu-20/#nastroyka-nginx-dlya-rabotu-s-gunicorn\">Настройка Nginx для работы с Gunicorn</a></li>\r\n</ul>\r\n\r\n<h2><a id=\"ustanovka-paketov\" name=\"ustanovka-paketov\">Установка пакетов</a></h2>\r\n\r\n<p>Что бы все приложения смогли работать вместе нам понадобится ряд пакетов, среди которых:</p>\r\n\r\n<ul>\r\n\t<li>python3-pip - менеджер пакетов с помощью которого мы можем установить Django и другие пакеты;</li>\r\n\t<li>python3-dev - нужен для работы с базой данных;</li>\r\n\t<li>python3-venv - используется для изоляции пакетов, которые будут использоваться вашим проектом;</li>\r\n\t<li>libpq-dev - нужен для работы с базой данных;</li>\r\n\t<li>postgresql - база данных;</li>\r\n\t<li>postgresql-contrib - расширение для работы с PostgreSQL;</li>\r\n\t<li>nginx - веб сервер;</li>\r\n\t<li>curl - программа для проверки работы протоколов.</li>\r\n</ul>\r\n\r\n<p>Установить все пакеты мы можем с помощью следующей команды:</p>\r\n\r\n<pre>\r\n<code>sudo apt install -y python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl python3-venv</code></pre>\r\n\r\n<p>По умолчанию у вас уже открыт 80 и 443 порт, и если вы откроете браузер или выполните следующую команду, то получите ответ Nginx т.к он слушает эти порты:</p>\r\n\r\n<pre>\r\n<code>curl localhost</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/20.jpg\" target=\"_blank\"><img alt=\"Проверка работы Nginx с curl на Ubuntu\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/20.jpg\" title=\"Проверка работы Nginx с curl на Ubuntu\" /></a></p>\r\n\r\n<p>Если это не так, то вы можете попробовать включить Nginx сами:</p>\r\n\r\n<pre>\r\n<code>sudo systemctl enable --now nginx\r\nsystemctl status nginx</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/06/39.jpg\" target=\"_blank\"><img alt=\"Проверка статуса сервиса Nginx на Ubuntu\" src=\"https://fixmypc.ru/media/uploads/2020/11/06/39.jpg\" title=\"Проверка статуса сервиса Nginx на Ubuntu\" /></a></p>\r\n\r\n<p>Вы так же сможете посмотреть на работу nginx с другого компьютера указав IP адрес. IP адрес можно узнать с помощью следующей команды:</p>\r\n\r\n<pre>\r\n<code>ip a</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/24.jpg\" target=\"_blank\"><img alt=\"Просмотр IP адреса сервера Ubuntu\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/24.jpg\" title=\"Просмотр IP адреса сервера Ubuntu\" /></a></p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/25.jpg\" target=\"_blank\"><img alt=\"Проверка работы Nginx на Ubuntu\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/25.jpg\" title=\"Проверка работы Nginx на Ubuntu\" /></a></p>\r\n\r\n<p>Если вы не можете открыть сайт используя свой ip адрес, то можно попробовать открыть порты в фаерволле:</p>\r\n\r\n<pre>\r\n<code>sudo ufw allow http\r\nsudo ufw allow https</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a id=\"sozdanie-polzovatelya-i-bazu-dannuh\" name=\"sozdanie-polzovatelya-i-bazu-dannuh\">Создание пользователей и базы данных PosgreSQL</a></h2>\r\n\r\n<p>С базой данных будет работать Django. Что бы это было возможно мы должны создать базу данных и ее пользователя.</p>\r\n\r\n<p>При установке PostgreSQL автоматически создается пользователь postgres имеющий все права для управления сервером баз данных. С помощью его мы создадим пользователя и дадим права на базу. psql - это команда, которая позволяет подключаться к серверу базы данных локально:</p>\r\n\r\n<pre>\r\n<code>sudo -u postgres psql</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/1.jpg\" target=\"_blank\"><img alt=\"Подключение к PostgreSQL на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/1.jpg\" title=\"Подключение к PostgreSQL на Ubuntu 20\" /></a></p>\r\n\r\n<p>С помощью следующей команды мы создадим базу данных. Вы можете выбрать любое имя. Важно запомнить название базы, так как без него вы не сможете выполнить дальнейшие настройки. В моем случае база будет называться &#39;fixmypc_database&#39;:</p>\r\n\r\n<pre>\r\n<code>CREATE DATABASE fixmypc_database;</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/2.jpg\" target=\"_blank\"><img alt=\"Создание базы PostgreSQL на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/2.jpg\" title=\"Создание базы PostgreSQL на Ubuntu 20\" /></a></p>\r\n\r\n<p>Создадим пользователя базы данных и дадим ему пароль. В моем случае пользователь &#39;fixmypc_database_user&#39;, а пароль &#39;password&#39;:</p>\r\n\r\n<pre>\r\n<code>CREATE USER fixmypc_database_user WITH PASSWORD &#39;password&#39;;</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/3.jpg\" target=\"_blank\"><img alt=\"Создание пользователя PostgreSQL с паролем на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/3.jpg\" title=\"Создание пользователя PostgreSQL с паролем на Ubuntu 20\" /></a></p>\r\n\r\n<p>Следующие настройки не обязательны, но они являются рекомендованными и описаны в документации Django. В большинстве случаев они у вас уже будут присутствовать, но вы все равно можете их выполнить. Эти настройки выполняют следующие действия:</p>\r\n\r\n<ul>\r\n\t<li>client_encoding - использование кодировки &#39;utf8&#39;, которая является стандартом для Linux, веб-серверов и т.д;</li>\r\n\t<li>default_transaction_isolation - режим изоляции транзакций. read committed - позволяет читать только те данные из таблицы, которые в данный момент не изменяются. Если данные изменяются, то вы будете ждать завершения их изменения;</li>\r\n\t<li>timezone - часовая зона UTC.</li>\r\n</ul>\r\n\r\n<p>В командах используется пользователь &#39;fixmypc_database_user&#39;. Если вы создавали другого пользователя - вам нужно изменить эту часть в строках ниже:</p>\r\n\r\n<pre>\r\n<code>ALTER ROLE fixmypc_database_user SET client_encoding TO &#39;utf8&#39;;\r\nALTER ROLE fixmypc_database_user SET default_transaction_isolation TO &#39;read committed&#39;;\r\nALTER ROLE fixmypc_database_user SET timezone TO &#39;UTC&#39;;</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/4.jpg\" target=\"_blank\"><img alt=\"Изменение кодировки PostgreSQL и часовой зоны на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/4.jpg\" title=\"Изменение кодировки PostgreSQL и часовой зоны на Ubuntu 20\" /></a></p>\r\n\r\n<p>Что бы пользователь мог подключаться к базе мы должны дать соответствующие права. Это можно сделать с помощью следующей команды (название так же замените, если вам понадобится):</p>\r\n\r\n<pre>\r\n<code>GRANT ALL PRIVILEGES ON DATABASE fixmypc_database TO fixmypc_database_user;</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/5.jpg\" target=\"_blank\"><img alt=\"Выдача прав на базу PostgreSQL на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/5.jpg\" title=\"Выдача прав на базу PostgreSQL на Ubuntu 20\" /></a></p>\r\n\r\n<p>Настройки базы завершены.&nbsp;&nbsp;Выйдем из консоли:</p>\r\n\r\n<pre>\r\n<code>\\q</code></pre>\r\n\r\n<p><img alt=\"Выход из настройки PostgreSQL на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/6.jpg\" title=\"Выход из настройки PostgreSQL на Ubuntu 20\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a id=\"sozdanie-virtualnogo-okrujeniya-i-rabota-s-pip\" name=\"sozdanie-virtualnogo-okrujeniya-i-rabota-s-pip\">Создание виртуального окружения и работа с pip</a></h2>\r\n\r\n<p>Виртуальное окружение позволяет корректно хранить и управлять&nbsp;версиями пакетов, которые мы будем устанавливать с помощью pip (python3-pip). Этот пакет устанавливается отдельно. Что бы создать виртуальное окружение вы должны определиться с местом где будет храниться основная часть вашего Django сайта. В моем случае это будет корень Ubuntu &#39;/&#39;, а папка будет называться fixmypc_folder. Я рекомендую запомнить название и путь, так как в дальнейшем все эти настройки еще понадобятся.</p>\r\n\r\n<p>Создадим папку:</p>\r\n\r\n<pre>\r\n<code>sudo mkdir /fixmypc_folder</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/7.jpg\" target=\"_blank\"><img alt=\"Создание директории на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/7.jpg\" title=\"Создание директории на Ubuntu 20\" /></a></p>\r\n\r\n<p>Перейдем в папку:</p>\r\n\r\n<pre>\r\n<code>cd /fixmypc_folder</code></pre>\r\n\r\n<p>Мое окружение будет называться &#39;env&#39; и это имя тоже понадобится для дальнейших настроек:</p>\r\n\r\n<pre>\r\n<code>sudo python3 -m venv env\r\nls</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/9.jpg\" target=\"_blank\"><img alt=\"Создание виртуального окружения Python на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/9.jpg\" title=\"Создание виртуального окружения Python на Ubuntu 20\" /></a></p>\r\n\r\n<p>Далее мы можем активировать виртуальное окружение:</p>\r\n\r\n<pre>\r\n<code>source env/bin/activate</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/10.jpg\" target=\"_blank\"><img alt=\"Активация виртуального окружения Python на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/10.jpg\" title=\"Активация виртуального окружения Python на Ubuntu 20\" /></a></p>\r\n\r\n<p>Как вы видите по скриншоту выше переход в виртуальное окружение всегда обозначается его названием&nbsp;в начале командной строки. Так как мое виртуальное окружение называется env, у меня стало отображаться (env).</p>\r\n\r\n<p>Далее мы установим пакеты, которые понадобятся для работы Django:</p>\r\n\r\n<ul>\r\n\t<li>django - фреймворк, который мы используем;</li>\r\n\t<li>gunicorn - WSGI сервер;</li>\r\n\t<li>psycopg2-binary - библиотека для подключения к PostgreSQL.</li>\r\n</ul>\r\n\r\n<pre>\r\n<code>sudo pip3 install django gunicorn psycopg2-binary</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/11.jpg\" target=\"_blank\"><img alt=\"Установка django gunicorn psycopg2-binary на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/11.jpg\" title=\"Установка django gunicorn psycopg2-binary на Ubuntu 20\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a id=\"sozdanie-proekta-django-i-ego-nastroyka-s-settings-py\" name=\"sozdanie-proekta-django-i-ego-nastroyka-s-settings-py\">Создание проекта Django и его настройка c settings.py</a></h2>\r\n\r\n<p>После того как вы установили нужные пакеты через pip нужно создать проект. В случае Django, создание проекта, это просто копирование шаблонных файлов объединенное в одну команду.</p>\r\n\r\n<p>Проекту тоже нужно дать имя. В моем случае это будет &#39;fixmypc_project&#39;:</p>\r\n\r\n<pre>\r\n<code>sudo django-admin startproject fixmypc_project</code></pre>\r\n\r\n<p>Теперь я имею следующую структуру папок, где проект и виртуальное окружение находятся на одном уровне:</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/12.jpg\" target=\"_blank\"><img alt=\"Структура папок для настройки Django и Nginx на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/12.jpg\" title=\"Структура папок для настройки Django и Nginx на Ubuntu 20\" /></a></p>\r\n\r\n<p>По умолчанию в Django установлены настройки, которые разрешают просмотр&nbsp; веб-сайта только локально (localhost/127.0.0.1). Вы можете это отредактировать зайдя в файл настройки проекта &#39;settings.py&#39;:</p>\r\n\r\n<pre>\r\n<code>sudo vim fixmypc_project/fixmypc_project/settings.py</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/14.jpg\" target=\"_blank\"><img alt=\"Структура папок для настройки Django и Nginx с settings.py на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/14.jpg\" title=\"Структура папок для настройки Django и Nginx с settings.py на Ubuntu 20\" /></a></p>\r\n\r\n<p>Нам нужна переменна, которая называется ALLOWED_HOSTS. Например вы можете добавить следующие значения в эту переменную:</p>\r\n\r\n<ul>\r\n\t<li>[&#39;*&#39;] - django будет работать с любого адреса. Удобно, когда ваш сервер на DHCP и не придется менять настройки каждый раз при изменении адреса. Эти настройки нельзя применять, если ваш сервер является публичным;</li>\r\n\t<li>[&#39;192.168.3.120&#39;] - запросы будут обрабатываться, если пользователь зашел по этому адресу;</li>\r\n\t<li>[&#39;domain.com&#39;] - запросы будут приниматься, если пользователь зашел по этому доменному имени;</li>\r\n\t<li>[&#39;.domain.com&#39;] - запросы будут приниматься, если пользователь зашел по этому доменному имени или по любому поддомену.</li>\r\n</ul>\r\n\r\n<p>Все эти значения можно сочетать. Обычно настройки имеют доменное имя и ip аддрес. Например:</p>\r\n\r\n<pre>\r\n<code>ALLOWED_HOSTS = [&#39;domain.local&#39;, &#39;www.domain.local&#39;, &#39;192.168.3.2&#39;]</code></pre>\r\n\r\n<p>Так как у меня DHCP и виртуальная машина, я буду применять &#39;*&#39;:</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/15.jpg\" target=\"_blank\"><img alt=\"Разрешенные подключения ALLOWED_HOSTS для работы Django на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/15.jpg\" title=\"Разрешенные подключения ALLOWED_HOSTS для работы Django на Ubuntu 20\" /></a></p>\r\n\r\n<p>На строке 28, со скриншота выше, так же можно увидеть переменную &#39;DEBUG&#39;. Эта переменная может принимать следующие значения:</p>\r\n\r\n<ul>\r\n\t<li>True - будут выводиться ошибки по котором можно выявить неисправность. Если это публичный сайт (production) - не используется;</li>\r\n\t<li>False - ошибки выводиться не будут.</li>\r\n</ul>\r\n\r\n<p>Пока вы не убедитесь, что сайт запускается без ошибок я бы не рекомендовал отключать DEBUG.</p>\r\n\r\n<p>В этом же файле есть переменная DATABASE, в которой прописываются&nbsp;настройки базы. Нам понадобится:</p>\r\n\r\n<ul>\r\n\t<li>Название базы - в моем случае это &#39;fixmypc_database&#39;;</li>\r\n\t<li>Имя пользователя&nbsp;- в моем случае это &#39;fixmypc_database_user&#39;;</li>\r\n\t<li>Пароль пользователя - в моем случае это &#39;password&#39;;</li>\r\n\t<li>Пакет, с помощью которого будет выполняться подключение к базе - в статье мы устанавливали &#39;psycopg2-binary&#39;, а вызывается он как &#39;postgresql_psycopg2&#39;.</li>\r\n</ul>\r\n\r\n<p>Примененные настройки выглядят так:</p>\r\n\r\n<pre>\r\n<code>DATABASES = {\r\n    &#39;default&#39;: {\r\n        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql_psycopg2&#39;,\r\n        &#39;HOST&#39;: &#39;localhost&#39;,\r\n        &#39;NAME&#39;: &#39;fixmypc_database&#39;,\r\n        &#39;USER&#39;: &#39;fixmypc_database_user&#39;,\r\n        &#39;PASSWORD&#39;: &#39;password&#39;,\r\n    }\r\n}</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/16.jpg\" target=\"_blank\"><img alt=\"Настройка базы данных для работы Django и PostgreSQL для работы в ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/16.jpg\" title=\"Настройка базы данных для работы Django и PostgreSQL для работы в ubuntu 20\" /></a></p>\r\n\r\n<p>В работе веб-сайтов есть понятие статических файлов. Это файлы, которые обрабатываются не&nbsp;Django, а Nginx. Например это могут быть файлы: css, jpg, mp4, js и т.д. Для таких файлов создается отдельная&nbsp;директория и она указывается в настройке &#39;STATIC_ROOT&#39;.</p>\r\n\r\n<p>Часто, переменная &#39;STATIC_ROOT&#39; объявляется вместе с &#39;BASE_DIR&#39;. Переменная &#39;BASE_DIR&#39; автоматически создается в начале этого файла и хранит полный путь до проекта.</p>\r\n\r\n<p>Можно объявить переменную следующим образом:</p>\r\n\r\n<pre>\r\n<code>STATIC_ROOT = BASE_DIR / &#39;static&#39;</code></pre>\r\n\r\n<p>В таком случае папка, куда будут складываться все статические файлы, будет иметь следующий путь:</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/17.jpg\" target=\"_blank\"><img alt=\"Создание статических файлов и папки static в Django на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/17.jpg\" title=\"Создание статических файлов и папки static в Django на Ubuntu 20\" /></a></p>\r\n\r\n<p>С помощью следующей команды мы соберем все статические файлы,&nbsp;и перенесем их в эту папку (она создастся автоматически):</p>\r\n\r\n<pre>\r\n<code>sudo python3 fixmypc_project/manage.py collectstatic</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/28.jpg\" target=\"_blank\"><img alt=\"Сбор статических файлов в Django на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/28.jpg\" title=\"Сбор статических файлов в Django на Ubuntu 20\" /></a></p>\r\n\r\n<p>Настройка выше сработает для Django установленной по умолчанию (старше чем версия 3.0). Если бы вы, при установке через pip, указывали другие версии, младше чем 3.0, пришлось бы указать путь следующим образом:</p>\r\n\r\n<pre>\r\n<code>STATIC_ROOT = os.path.joing(BASE_DIR, &#39;static/&#39;)</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/18.jpg\" target=\"_blank\"><img alt=\"Настройка STATIC_ROOT для работы с Django и Nginx\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/18.jpg\" title=\"Настройка STATIC_ROOT для работы с Django и Nginx\" /></a></p>\r\n\r\n<p>Если множество дополнительных настроек, например MEDIA_ROOT (директория куда будут загружаться меди файлы) или STATICFILES_DIRS (дополнительные места сбора статических файлов), но они не будут рассматриваться в рамках этой статьи.&nbsp;Настройки файла settings.py закончены и его можно сохранить.</p>\r\n\r\n<p>Теперь вы можете протестировать&nbsp;запуск Django. Это можно сделать двумя способами. Следующая команда запускает Django по умолчанию, слушая подключения только локально и&nbsp;по порту 8000:</p>\r\n\r\n<pre>\r\n<code>sudo python3 fixmypc_project/manage.py runserver</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/13/19.jpg\" target=\"_blank\"><img alt=\"Запуск сервера Django в тестовом режиме на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/13/19.jpg\" title=\"Запуск сервера Django в тестовом режиме на Ubuntu 20\" /></a></p>\r\n\r\n<p>Работу Django можно проверить следующей командой:</p>\r\n\r\n<pre>\r\n<code>curl localhost:8000</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/21.jpg\" target=\"_blank\"><img alt=\"Проверка работы Django через curl в ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/21.jpg\" title=\"Проверка работы Django через curl в ubuntu 20\" /></a></p>\r\n\r\n<p>В случае выше вы сможете проверить работу Django только локально (на том компьютере где он установлен). Если вы указали в переменной &#39;ALLOWED_HOSTS&#39;&nbsp;IP адрес, который принадлежит вашему Ubuntu, или знак &#39;*&#39;, то вы сможете выполнить следующую команду и посмотреть на работу Django с другого компьютера:</p>\r\n\r\n<pre>\r\n<code>sudo python3 fixmypc_project/manage.py runserver 0.0.0.0:8000</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/22.jpg\" target=\"_blank\"><img alt=\"Запуск сервера Django методом bind на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/22.jpg\" title=\"Запуск сервера Django методом bind на Ubuntu 20\" /></a></p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/23.jpg\" target=\"_blank\"><img alt=\"Проверка работы Django на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/23.jpg\" title=\"Проверка работы Django на Ubuntu 20\" /></a></p>\r\n\r\n<p>Если вы не можете открыть Django с другого компьютера и в консоли Ubuntu у вас не появляются ошибки, то возможно проблема в фаерволле. Вы можете открыть порт 8000 (или другой, который указали) что бы протестировать его работу следующей командой:</p>\r\n\r\n<pre>\r\n<code>sudo ufw allow 8000</code></pre>\r\n\r\n<p>Это не обязательно т.к. сетевое подключение, в дальнейшем, будет принимать nginx, а не Django.</p>\r\n\r\n<p><b>Вам так же будет интересно:</b></p>\r\n\r\n<h5><a href=\"https://fixmypc.ru/post/ustanovka-freimvorka-python-django-3-s-sozdaniem-pervogo-prilozheniia/\" target=\"_blank\">Создание первого приложения во фреймворке Python Django 3</a></h5>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a id=\"dopolnitelnue-nastroyki-django\" name=\"dopolnitelnue-nastroyki-django\">Дополнительные настройки Django</a></h2>\r\n\r\n<p>Для того, что бы проверить работу базы данных и что бы Django создал нужные для него таблицы в базе данных&nbsp;нам нужно выполнить миграции. Миграции Django автоматически выполняются в 2 этапа: создание кода и его применение к базе:</p>\r\n\r\n<pre>\r\n<code>sudo python3 fixmypc_project/manage.py makemigrations\r\nsudo python3 fixmypc_project/manage.py migrate</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/26.jpg\" target=\"_blank\"><img alt=\"Выполнение миграций Django и проверка соединения с базой на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/26.jpg\" title=\"Выполнение миграций Django и проверка соединения с базой на Ubuntu 20\" /></a></p>\r\n\r\n<p>Успешно примененные миграции говорят о нормально работе Django с postgresql.</p>\r\n\r\n<p>Мы можем создать пользователя, который в дальнейшем будет администратором Django, с помощью следующей команды:</p>\r\n\r\n<pre>\r\n<code>sudo python3 fixmypc_project/manage.py createsuperuser</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/27.jpg\" target=\"_blank\"><img alt=\"Создание администратора Django на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/27.jpg\" title=\"Создание администратора Django на Ubuntu 20\" /></a></p>\r\n\r\n<p>На этом этапе мы так же можем проверить работу команды gunicorn с Django выполнив следующее. Для его запуска понадобится файл wsgi.py, созданный Django автоматически. Сам файл находится по следующему пути:</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/05/38.jpg\" target=\"_blank\"><img alt=\"Подключение файла wsgi.py в Django\" src=\"https://fixmypc.ru/media/uploads/2020/11/05/38.jpg\" title=\"Подключение файла wsgi.py в Django\" /></a></p>\r\n\r\n<p>Обратите внимание, что в команде ниже &#39;fixmypc_project.wsgi&#39; - это путь, состоящий из папки и файла (без расширения), разделенных точкой:</p>\r\n\r\n<pre>\r\n<code>gunicorn --bind 0.0.0.0:8000 fixmypc_project.wsgi</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/06/40.jpg\" target=\"_blank\"><img alt=\"Проверка работы gunicorn и Django на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/11/06/40.jpg\" title=\"Проверка работы gunicorn и Django на Ubuntu 20\" /></a></p>\r\n\r\n<p>Работа в виртуальном окружении закончена. Вы можете выйти из него выполнив следующую команду:</p>\r\n\r\n<pre>\r\n<code>deactivate</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/29.jpg\" target=\"_blank\"><img alt=\"Выход из виртуального окружения Python\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/29.jpg\" title=\"Выход из виртуального окружения Python\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a id=\"sozdanie-socketa-i-nastroyka-wsgi-gunicorn\" name=\"sozdanie-socketa-i-nastroyka-wsgi-gunicorn\">Создание сокета и настройка WSGI Gunicorn</a></h2>\r\n\r\n<p>Gunicorn - это WSGI сервер, который поможет Nginx общаться с Django. Для его работы можно использовать отдельный файл, но более надежным способом является создание файла сокета и сервиса. Файл сокета используется для обмена информацией между процессом Nginx,Django и Gunicorn. Когда к сокету будет выполняться подключение он автоматически запустит сервис Gunicorn.</p>\r\n\r\n<p>Создадим и откроем файл по следующему пути:</p>\r\n\r\n<pre>\r\n<code>sudo vim /etc/systemd/system/gunicorn.socket</code></pre>\r\n\r\n<p>В этот файл нужно поместить следующую информацию:</p>\r\n\r\n<pre>\r\n<code>[Unit]\r\nDescription=Gunicorn socket\r\n\r\n[Socket]\r\nListenStream=/run/gunicorn.sock\r\n\r\n[Install]\r\nWantedBy=sockets.target</code></pre>\r\n\r\n<p>Теперь создадим сервис по следующему пути:</p>\r\n\r\n<pre>\r\n<code>sudo vim /etc/systemd/system/gunicorn.service</code></pre>\r\n\r\n<p>В этот файл мы должны поместить следующую информацию (они будут одинаковые у всех в рамках этой статьи):</p>\r\n\r\n<ul>\r\n\t<li>Unit - директива, которая описывает сервис и говорит, что он может быть запущен только после загрузки &quot;сети&quot; (network target) и если gunicorn.socket работает;</li>\r\n\t<li>Install - создаст файл в директории &#39;ls /etc/systemd/system/multi-user.target.wants/&#39; для запуска сервиса.</li>\r\n</ul>\r\n\r\n<p>Наиболее важным будет правильно указать настройки в блоке Service, так как тут наблюдаются наиболее частые ошибки (эти настройки могут у вас отличаться):</p>\r\n\r\n<ul>\r\n\t<li>User и Group определяют от чьего имени будет запускаться сервис;</li>\r\n\t<li>WorkingDirectory - директория отсносительно которой будут запускаться часть файлов в ExecStart;</li>\r\n\t<li>ExecStart - процесс, который нужно запустить в качестве сервиса. Скорее всего он у вас так же будет по следующему пути &#39;/usr/local/bin/gunicorn&#39;, но вы можете это перепроверить командой &#39;which gunicorn&#39;.</li>\r\n</ul>\r\n\r\n<p>Параметры &#39;/usr/local/bin/gunicorn&#39; говорят о следующем:</p>\r\n\r\n<ul>\r\n\t<li>access-logfile - со значением &#39;-&#39; говорит, что ошибки будут писаться в stdout;</li>\r\n\t<li>workers - количество возможных процессов, для обработки запросов. Рассчитывается из количества 2-4 умноженное на количество ядер;</li>\r\n\t<li>bind - связанный с сервисом сокет (будет таким же у всех);</li>\r\n\t<li>fixmypc_project.wsgi:application - путь, относительно &#39;WorkingDirectory&#39;, где расположен файл wsgi.py. В качестве разделителя &#39;.&#39;. Application - это название переменной в этом файле.</li>\r\n</ul>\r\n\r\n<p>Весь файл настроек будет выглядеть следующим образом:</p>\r\n\r\n<pre>\r\n<code>[Unit]\r\nDescription=gunicorn daemon\r\nRequires=gunicorn.socket\r\nAfter=network.target\r\n\r\n[Service]\r\nUser=alex\r\nGroup=alex\r\nWorkingDirectory=/fixmypc_folder/fixmypc_project\r\nExecStart=/usr/local/bin/gunicorn \\\r\n          --access-logfile - \\\r\n          --workers 3 \\\r\n          --bind unix:/run/gunicorn.sock \\\r\n          fixmypc_project.wsgi:application\r\n\r\n[Install]\r\nWantedBy=multi-user.target</code></pre>\r\n\r\n<p>Запустим сокет:</p>\r\n\r\n<pre>\r\n<code>sudo systemctl enable --now gunicorn.socket\r\nsystemctl status gunicorn.socket</code></pre>\r\n\r\n<p>У нас не должно появляться каких либо ошибок.</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/30.jpg\" target=\"_blank\"><img alt=\"Включение и проверка работы сокета gunicorn на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/30.jpg\" title=\"Включение и проверка работы сокета gunicorn на Ubuntu 20\" /></a></p>\r\n\r\n<p>Вы можете проверить работу сервиса gunicorn следующей командой, он будет не активен:</p>\r\n\r\n<pre>\r\n<code>systemctl status gunicorn.service</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/10/14/31.jpg\" target=\"_blank\"><img alt=\"Включение и проверка работы сервиса gunicorn на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/10/14/31.jpg\" title=\"Включение и проверка работы сервиса gunicorn на Ubuntu 20\" /></a></p>\r\n\r\n<p>Сервис будет активирован автоматически при первом запросе. Этот запрос мы можем послать через сокет используя curl:</p>\r\n\r\n<pre>\r\n<code>sudo curl --unix-socket /run/gunicorn.sock localhost</code></pre>\r\n\r\n<p>Успешное выполнение команды покажет следующий вывод:</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/05/34.jpg\" target=\"_blank\"><img alt=\"Выполнение запроса к сокету gunicorn через curl на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/11/05/34.jpg\" title=\"Выполнение запроса к сокету gunicorn через curl на Ubuntu 20\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a id=\"proverka-rabotu-gunicorn\" name=\"proverka-rabotu-gunicorn\">Проверка работы gunicorn</a></h2>\r\n\r\n<p>Gunicorn является ключевым сервисом и его проблемы с ним тяжело диагностировать. Для проверки его состояния вы можете выполнить следующую команду:</p>\r\n\r\n<pre>\r\n<code>systemctl status gunicorn.socket</code></pre>\r\n\r\n<p>Вывод команды должен быть следующим:</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/05/32.jpg\" target=\"_blank\"><img alt=\"Просмотр статуса gunicorn на Ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/11/05/32.jpg\" title=\"Просмотр статуса gunicorn на Ubuntu 20\" /></a></p>\r\n\r\n<p>У вас так же должен существовать файл в директории run:</p>\r\n\r\n<pre>\r\n<code>file /run/gunicorn.sock</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/05/33.jpg\" target=\"_blank\"><img alt=\"Проверка существования файла Gunicorn на ubuntu 20\" src=\"https://fixmypc.ru/media/uploads/2020/11/05/33.jpg\" title=\"Проверка существования файла Gunicorn на ubuntu 20\" /></a></p>\r\n\r\n<p>Для диагностики ошибок вы можете посмотреть журнал логов:</p>\r\n\r\n<pre>\r\n<code>sudo journalctl -u gunicorn.socket</code></pre>\r\n\r\n<p>Так же, если вы видите ошибки, стоит перепроверить файлы socket и service созданные выше.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a id=\"nastroyka-nginx-dlya-rabotu-s-gunicorn\" name=\"nastroyka-nginx-dlya-rabotu-s-gunicorn\">Настройка Nginx для работы с Gunicorn</a></h2>\r\n\r\n<p>Для настройки nginx создадим файл в директории nginx. Мой файл будет называться fixmypc_site, но его название нигде больше использоваться не будет и поэтому его можно назвать как угодно:</p>\r\n\r\n<pre>\r\n<code>vim /etc/nginx/sites-available/fixmypc_site</code></pre>\r\n\r\n<p>В этом файле мы должны будем указать несколько параметров. Первое - на каком порту будет работать сайт и его DNS имя. Порт, который используется по умолчанию протоколом HTTP - 80.</p>\r\n\r\n<p>DNS имя вы должны знать сами. Вы можете его купить у регистратора доменов, зарегистрировать в локальном DNS сервере либо прописать его в файле hosts. Ниже пример для домена fixmypc.ru:</p>\r\n\r\n<pre>\r\n<code>server {\r\n   listen 80;\r\n   server_name fixmyc.ru www.fixmypc.ru;\r\n}</code></pre>\r\n\r\n<p>Далее нам нужно указать путь до статических файлов (переменная STATIC_ROOT в settings.py), где будут лежать наши файлы: css,js,jpg и т.д. Эта директория будет обрабатываться напрямую Nginx&#39;ом. Если вы шли точно по инструкциям выше, то этот путь будет следующим &#39;/fixmypc_folder/fixmypc_project/static&#39;. В других случаях используйте названия тех директорий, которые создавали вы.</p>\r\n\r\n<pre>\r\n<code>server {\r\n   listen 80;\r\n   server_name fixmyc.ru www.fixmypc.ru;\r\n\r\n   location /static/ {\r\n      root /fixmypc_folder/fixmypc_project/static;\r\n   }\r\n}</code></pre>\r\n\r\n<p>Нам нужно добавить последнюю директиву, которая будет говорить что при открытии корня сайта &#39;/&#39; нам нужно будет обращаться к Gunicorn сокету и получать информацию от него. Скорее всего она будет одинаковой во всех случаях (если вы не меняли названий сокетов и сервисов):</p>\r\n\r\n<pre>\r\n<code>server {\r\n   listen 80;\r\n   server_name fixmyc.ru www.fixmypc.ru;\r\n\r\n   location /static/ {\r\n      root /fixmypc_folder/fixmypc_project/static;\r\n   }\r\n\r\n    location / {\r\n        include proxy_params;\r\n        proxy_pass http://unix:/run/gunicorn.sock;\r\n    }\r\n}</code></pre>\r\n\r\n<p>Далее мы можем сохранить файл и установить символическую ссылку в каталоге, который читает nginx. Заменить название &quot;fixmypc_site&quot; на то, которое используете вы:</p>\r\n\r\n<pre>\r\n<code>sudo ln -s /etc/nginx/sites-available/fixmypc_site /etc/nginx/sites-enabled/</code></pre>\r\n\r\n<p>В каталоге sites-enabled так же расположен сайт, который открывает по умолчанию на 80 порту. Вы можете убрать у него директиву &quot;default_server&quot; и поставить ее в свой файл либо просто удалить этот файл:</p>\r\n\r\n<pre>\r\n<code>sudo rm /etc/nginx/sites-enabled/default</code></pre>\r\n\r\n<p>С помощью следующей команды можно проверить, что в файлах Nginx нет опечаток и других ошибок:</p>\r\n\r\n<pre>\r\n<code>sudo nginx -t</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/05/35.jpg\" target=\"_blank\"><img alt=\"Создание конфигурации Nginx для работы с Django и Gunicorn\" src=\"https://fixmypc.ru/media/uploads/2020/11/05/35.jpg\" title=\"Создание конфигурации Nginx для работы с Django и Gunicorn\" /></a></p>\r\n\r\n<p>Перезапустим сервис Nginx что бы наши настройки применились и проверим его статус:</p>\r\n\r\n<pre>\r\n<code>sudo systemctl reload nginx.service\r\nsystemctl status nginx.service</code></pre>\r\n\r\n<p>Стрелки ниже указывают, что сервис работает в данный момент и он включится сам после перезагрузки компьютера:</p>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/05/36.jpg\" target=\"_blank\"><img alt=\"Проверка работы сервиса Nginx на Ubuntu\" src=\"https://fixmypc.ru/media/uploads/2020/11/05/36.jpg\" title=\"Проверка работы сервиса Nginx на Ubuntu\" /></a></p>\r\n\r\n<p>После этого вы сможете открыть сайт в браузере или выполнить следующую команду:</p>\r\n\r\n<pre>\r\n<code>curl localhost</code></pre>\r\n\r\n<p><a href=\"https://fixmypc.ru/media/uploads/2020/11/05/37.jpg\" target=\"_blank\"><img alt=\"Проверка работы Django с Gunicorn и Nginx\" src=\"https://fixmypc.ru/media/uploads/2020/11/05/37.jpg\" title=\"Проверка работы Django с Gunicorn и Nginx\" /></a></p>\r\n\r\n<p>Настройка закончена.</p>", "created_at": "2022-06-27T14:06:04.427Z", "author": 1}}, {"model": "newsfeed.news", "pk": 54, "fields": {"title": "How to edit file within Docker container or edit a file after I shell into a Docker container?", "slug": "how-to-edit-file-within-docker-container-or-edit-a-file-after-i-shell-into-a-docker-container", "content": "<p>While working on my&nbsp;<a href=\"https://jhooq.com/spring-boot-with-docker/\">Spring Boot Microservices with Docker</a>&nbsp;I felt a need to edit some of the files present under my docker container.</p>\r\n\r\n<p>But when I tried to edit the file&nbsp;<code>nano application.yaml</code>&nbsp;it throws me an error&nbsp;<code>bash: nano: command not found</code>. So I was not able to edit the file which is present inside my running docker container.</p>\r\n\r\n<p>After spending some time on google and thinking about the issue I realized docker never encourages you to edit or change anything present inside the docker container.</p>\r\n\r\n<p><a href=\"https://www.docker.com/\" rel=\"noopener\" target=\"_blank\">Docker</a>&nbsp;has the principle of keeping the things lightweight so that we can easily ship the containers to any environment due to that fact you will never find utilities such as&nbsp;<code>nano</code>,&nbsp;<code>tree</code>&nbsp;etc by default installed. You have to install it manually inside your docker container.</p>\r\n\r\n<h2 id=\"here-are-the-steps-for-editing-files-in-a-container\">Here are the steps for editing files in a container</h2>\r\n\r\n<ol>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#1-find-the-container-id-of-a-running-container\">Find the container id of a running container</a></li>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#2-login-inside-the-docker-container-using-container-id\">Login inside the docker container using CONTAINER ID</a></li>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#3-update-the-package-manager\">Update the package manager</a></li>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#4-install-the-required-package-vi-nano-vim-etc\">Install the required package vi, nano, vim etc.</a></li>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#5-edit-the-file-using-either-vim-or-nano\">Edit the file using either vim or nano</a></li>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#6-install-vim-editor-along-with-dockerfile\">Install vim editor along with dockerfile</a></li>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#7-using-remote-editor-by-exposing-the-port-22\">Using remote editor by exposing the port 22</a></li>\r\n\t<li><a href=\"https://jhooq.com/docker-edit-file-inside-container/#8-best-practices-for-editing-the-file\">Best practices for editing the file</a></li>\r\n</ol>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"1-find-the-container-id-of-a-running-container\">1. Find the container id of a running container</h2>\r\n\r\n<p>First, we need to find the&nbsp;<em>CONTAINER ID</em>&nbsp;of the running container. Use the following command to list all the running containers -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">docker ps -a\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p>The above command will list out all the running containers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<figure><img alt=\"\" data-pos=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://jhooq.com/wp-content/uploads/docker/edit-file-inside-docker/docker-ps-a.webp\" title=\"docker ps -a for view docker image before editing the file inside docker conatainer\" />\r\n<figcaption>docker ps -a for view docker image before editing the file inside docker conatainer</figcaption>\r\n</figure>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Look at the&nbsp;<em>CONTAINER ID</em>&nbsp;in which you want to edit the file.</p>\r\n\r\n<p>Note down or COPY the&nbsp;<em>CONTAINER ID</em>&nbsp;because we are going to use it to go inside the docker container.</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"2-login-inside-the-docker-container-using-container-id\">2. Login inside the docker container using CONTAINER ID</h2>\r\n\r\n<p>In the previous&nbsp;<a href=\"https://jhooq.com/docker-edit-file-inside-container/#1-find-the-container-id-of-a-running-container\">step-1</a>&nbsp;we have to fetch the&nbsp;<em>CONTAINER ID</em>&nbsp;of the running container. Now we need to login into the container using the following command -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">docker exec -u 0 -it 8662ea2fa000 /bin/bash\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p>If the above command fails with the message -&nbsp;<code>OCI runtime exec failed: exec failed: container_linux.go:380: starting container process caused: exec: &quot;/bin/bash&quot;: stat /bin/bash: no such file or directory: unknown</code>&nbsp;then you should replace the&nbsp;<code>/bin/bash</code>&nbsp;with&nbsp;<code>/bin/sh</code></p>\r\n\r\n<p>Here is the command -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"fallback\">docker exec -u 0 -it 8662ea2fa000 /bin/sh\r\n</code></pre>\r\n\r\n<p><strong>Note -</strong>&nbsp;The above command will help you to log in as&nbsp;<code>root</code>&nbsp;user so that you will have all the privileges.</p>\r\n\r\n<p>After executing the above command you will be inside your running container.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<figure><img alt=\"\" data-pos=\"2\" decoding=\"async\" loading=\"lazy\" src=\"https://jhooq.com/wp-content/uploads/docker/edit-file-inside-docker/docker-login-exec.webp\" title=\"docker login/shell using docker id docker exec -u 0 -it 8662ea2fa000 /bin/sh\" />\r\n<figcaption>docker login/shell using docker id docker exec -u 0 -it 8662ea2fa000 /bin/sh</figcaption>\r\n</figure>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>If you do not put the&nbsp;<code>-u 0</code>&nbsp;flag inside your docker container then you will be logged as&nbsp;<code>appuser</code>&nbsp;and you will not have root privileges and you will not be able to install any new utility inside your docker container.</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"3-update-the-package-manager\">3. Update the package manager</h2>\r\n\r\n<p>Once you are logged into the docker container the first thing which you need to do is to update the package manager so that it will have all the latest repository URLs updated.</p>\r\n\r\n<p>Run the following command to update the package manager -</p>\r\n\r\n<ol>\r\n\t<li>For CentOS -</li>\r\n</ol>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">yum update\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<ol start=\"2\">\r\n\t<li>For Ubuntu</li>\r\n</ol>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">apt-get update\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"4-install-the-required-package-vi-nano-vim-etc\">4. Install the required package vi, nano, vim etc.</h2>\r\n\r\n<p>Now after updating the package repository you can install your favorite editor&nbsp;<em>(vi, nano, vim)</em>&nbsp;inside your docker container so that you can edit the file.</p>\r\n\r\n<p>Here is the command for installing the editor -</p>\r\n\r\n<ol>\r\n\t<li>For CentOs</li>\r\n</ol>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">yum install vim-enhanced -y\r\nyum install nano -y\r\nyum install vim-minimal -y\r\n\r\nor\r\n\r\ndnf install vim-enhanced -y\r\ndnf install nano -y\r\ndnf install vim-minimal -y\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<ol start=\"2\">\r\n\t<li>For Ubuntu</li>\r\n</ol>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">apt-get install vim\r\napt-get install nano\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"5-edit-the-file-using-either-vim-or-nano\">5. Edit the file using either vim or nano</h2>\r\n\r\n<p>Finally, you can use the command&nbsp;<code>nano application.yaml</code>&nbsp;or&nbsp;<code>vim application.yml</code>&nbsp;to edit/update your file present inside the running docker container.</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"6-install-vim-editor-along-with-dockerfile\">6. Install vim editor along with dockerfile</h2>\r\n\r\n<p>This is one of the easiest ways with which you can install your favorite editor along with your docker container. I am using the&nbsp;<a href=\"https://www.vim.org/\" rel=\"noopener\" target=\"_blank\"><code>vim</code></a>&nbsp;editor but you can choose any Linux editor of your choice.</p>\r\n\r\n<p>You can write installation instructions for&nbsp;<code>vim</code>&nbsp;inside your&nbsp;<code>Dockerfile</code>&nbsp;so that whenever you built and run the docker image&nbsp;<code>vim</code>&nbsp;editor will always be installed inside your container.</p>\r\n\r\n<p>Here is my docker file where I have installed the&nbsp;<code>vim</code>&nbsp;editor -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">FROM openjdk:8-jdk-alpine\r\nARG JAR_FILE=build/libs/*.jar\r\nCOPY ${JAR_FILE} app.jar\r\n\r\nRUN mkdir destination-dir-for-add\r\nADD sample.tar.gz /destination-dir-for-add\r\n\r\nRUN [&quot;apt-get&quot;, &quot;update&quot;]\r\nRUN [&quot;apt-get&quot;, &quot;-y&quot;, &quot;install&quot;, &quot;vim&quot;]\r\n\r\nENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p>If you look carefully in the above docker file then you will notice I have added only two lines of code for installing the&nbsp;<code>vim</code>&nbsp;into my container -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">RUN [&quot;apt-get&quot;, &quot;update&quot;]\r\nRUN [&quot;apt-get&quot;, &quot;-y&quot;, &quot;install&quot;, &quot;vim&quot;]\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p>So you can use the above two lines of codes and replace the&nbsp;<code>vim</code>&nbsp;with your favorite editor of your choice.</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"7-using-remote-editor-by-exposing-the-port-22\">7. Using remote editor by exposing the port 22</h2>\r\n\r\n<p>There is one more way by which you can expose the&nbsp;<em>port 22</em>&nbsp;or in other words if I say enabling the SSH into the running container. I would certainly not recommend this approach because you will start many parallel processes along with your container.</p>\r\n\r\n<p>But use this approach only when you are in the development phase and where you need to debug. For a production environment, it is highly discouraged.</p>\r\n\r\n<p>So here are the things which we need to do -</p>\r\n\r\n<ol>\r\n\t<li>Install&nbsp;<em>openssh-server</em></li>\r\n\t<li>run&nbsp;<em>ssh</em>&nbsp;process</li>\r\n\t<li>Expose port&nbsp;<em>22</em></li>\r\n\t<li>Build and run docker image on port 22</li>\r\n</ol>\r\n\r\n<p>We will put all this inside the docker file. Here is the docker file -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">FROM openjdk:8-jdk-alpine\r\nARG JAR_FILE=build/libs/*.jar\r\nCOPY ${JAR_FILE} app.jar\r\n\r\nRUN mkdir destination-dir-for-add\r\nADD sample.tar.gz /destination-dir-for-add\r\n\r\nRUN [&quot;apt-get&quot;, &quot;update&quot;]\r\nRUN [&quot;apt-get&quot;, &quot;install&quot;, &quot;-y&quot;, &quot;openssh-server&quot;]\r\nRUN echo &#39;root:lollol0&#39; | chpasswd\r\nRUN sed -i &#39;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/&#39; /etc/ssh/sshd_config\r\nRUN [&quot;/etc/init.d/ssh&quot;, &quot;start&quot;]\r\n\r\nEXPOSE 22\r\n\r\nWORKDIR &quot;/app&quot;\r\n\r\nCMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]\r\n\r\nENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;] \r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h4 id=\"71-build-the-docker-image\">7.1 Build the docker image</h4>\r\n\r\n<p>Now we need to build the docker image. Use the following command to build the docker image and substitute the image name as per your need -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">docker build -t myimagewithopenssh . \r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4 id=\"72-run-docker-image-on-port-22\">7.2 Run docker image on port 22</h4>\r\n\r\n<p>Now in the previous two steps(<a href=\"https://jhooq.com/docker-edit-file-inside-container/#7-using-remote-editor-by-exposing-the-port-22\">Step 7</a>,&nbsp;<a href=\"https://jhooq.com/docker-edit-file-inside-container/#71-build-the-docker-image\">Step 7.1</a>) we have created a dockerfile and build a docker file. Let&#39;s run the dockerfile on the port&nbsp;<code>22</code></p>\r\n\r\n<p>Here is the command you should use for running the docker image -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">docker run --rm -p 2222:22 -d --name=myimagewithopenssh myimagewithopenssh \r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p>After starting the container now you can edit the file remotely. Here is the&nbsp;<code>vim</code>&nbsp;command for editing the file present inside your docker container -</p>\r\n\r\n<pre tabindex=\"0\">\r\n<code data-lang=\"bash\">vim scp://root@localhost:2222//app/application.yaml\r\n</code></pre>\r\n\r\n<p>BASH</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<h2 id=\"8-best-practices-for-editing-the-file\">8. Best practices for editing the file</h2>\r\n\r\n<p>Editing a file inside a running docker container is not recommended because it goes against the basic principles of containerization. A container should exhibit similar behavior no matter where you running it, so if a container works in your development environment then it should work on stage as well as the production environment.</p>\r\n\r\n<p><em>So the question comes why do you need to edit a file inside the running container?</em></p>\r\n\r\n<p><strong>Answer -</strong>&nbsp;You are working on a development environment where you want to test some changes by temporarily editing the files inside the docker container but still the scope is limited to your development environment.</p>\r\n\r\n<p><strong>Here are some discussion threads which I found on the development forum -</strong></p>\r\n\r\n<ol>\r\n\t<li>Stackoverflow -&nbsp;<a href=\"https://stackoverflow.com/questions/30853247/how-do-i-edit-a-file-after-i-shell-to-a-docker-container\" rel=\"noopener\" target=\"_blank\">How do I edit a file after I shell to a Docker container?</a></li>\r\n\t<li>Docker Forum -&nbsp;<a href=\"https://forums.docker.com/t/how-to-edit-a-file-in-a-running-container/95148\" rel=\"noopener\" target=\"_blank\">How to edit a file in a running container?</a></li>\r\n</ol>", "created_at": "2022-06-27T14:07:12.667Z", "author": 1}}]